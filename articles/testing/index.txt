Writing Tests for RubyMotion Apps
=================================

このドキュメントは、既存の RubyMotion アプリケーションに対して機能テストを記述する方法を説明します。テストは、遵守することになっている仕様のセットを提供し、誤ったコード変更によるリグレッションを捕捉するために使用できます。

Getting Started
---------------

RubyMotion では https://github.com/chneukirchen/bacon/[Bacon] が利用できます。これは、有名な http://rspec.info/[RSpec] framework の小規模なクローンで、https://github.com/chneukirchen[Christian Neukirchen] によって開発されました。

とりわけ、RubyMotion では、iOS 向けに拡張された https://github.com/alloy/MacBacon[MacBacon] と呼ばれるバージョンを使用しています。MacBacon は https://github.com/alloy[Eloy Duran] によってメンテナンスされています。

Spec Files
~~~~~~~~~~

Spec ファイルはプロジェクトのテストを含みます。

Spec ファイルは RubyMotion プロジェクトの 'spec' ディレクトリ配下に作成されます。

デフォルトでは、RubyMotion プロジェクトには 'spec/main_spec.rb' ファイルがあり、このファイルにはアプリケーションが単一のウィンドウを持っていることを保証する 1 つのテストが書かれています。

Spec Helpers
~~~~~~~~~~~~

たとえば Spec ファイルで使用される共通のクラスやメソッドのセットを導入というような、テストフレームワークを拡張するために、Spec ヘルパーは使用できます。Spec ファイルよりも前に、Spec ヘルパーはコンパイル・実行されます。

Spec ヘルパーは RubyMotion プロジェクトの 'spec/helpers' ディレクトリ下に作成されます(例 : 'spec/helpers/extension.rb')。

デフォルトでは、RubyMotion プロジェクトに Spec ヘルパーは用意されていません。

Running the Tests
~~~~~~~~~~~~~~~~~

RubyMotion プロジェクトのテストスイートを実行するために、rake タスクの +spec+ を使用します。

----
$ rake spec
$ rake spec:device
----

このコマンドは、Spec フレームワーク、ヘルパー、Spec ファイルを含んだ特別バージョンのアプリケーションをコンパイルします。そして、シミュレータ上でバックグラウンド実行します。

いったん spec が実行されると、プログラムは適切なステータスコード (成功の場合は +0+、失敗の場合には +1+) をコマンドラインのプロンプトにもたらします。

Run Selected Spec Files
~~~~~~~~~~~~~~~~~~~~~~~

テストスイート全体を実行するのではなく、1 つまたはいくつかの Spec ファイルのみを実行したい場合があるかもしれません。

実行すべき Spec ファイルをフィルターするために、環境変数 +files+ にカンマ区切りの一連のパターンを設定できます。パターンは、Spec ファイルの basename (ファイルの拡張子を取り除いたもの) か、ファイルパスのいずれかになります。

例として、以下のコマンドは 'spec/foo_spec.rb' と 'spec/bar_spec.rb' のみを実行します。

----
$ rake spec files=foo_spec,spec/bar_spec.rb
----

Output Format
~~~~~~~~~~~~~

環境変数 +output+ に値を指定することで、+rake spec+ の出力フォーマットをカスタマイズすることができます。利用可能な出力フォーマットは、+spec_dox+ (デフォルト), +fast+, +test_unit+, +tap+ と +knock+ です。

----
$ rake spec output=test_unit
----

Basic Testing
-------------

MacBacon フレームワークがサポートしている Assertion や Predicate のリストは、MacBacon の https://github.com/alloy/MacBacon/blob/master/README.md[README] ファイルを参照してください。

Views and Controllers Testing
-----------------------------

このレイヤーでは、コントローラに対する機能テストを記述し、ハイレベルなイベント生成 API を通じてやりとりができます。みなさんは、JavaScript でテストを記述することなく、Apple の http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/_index.html[UIAutomation] フレームワーク機能を活用できます。

小規模な API で構成されており、Spec や、いくつかの Run Loop ヘルパー と `UIView` で利用できます。

IMPORTANT: これは、完全なアプリケーションの受け入れテストのためのもの **ではありません**。したがって、アプリケーションを通常通り起動させるすべきではありません。たとえば、+application:didFinishLaunchingWithOptions:+ から素早く return するために、+RUBYMOTION_ENV+ を使用することで行えます。

----
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    return true if RUBYMOTION_ENV == 'test'
    # ...
----

Configuring your Context
~~~~~~~~~~~~~~~~~~~~~~~~

Spec のコンテキストに、コントローラが指定されることを教える必要があります。必要な API で拡張します。次のような方法で、ビューコントローラクラスを指定することで、これを行います。

----
describe "The 'taking over the world' view" do
  tests TakingOverTheWorldViewController

  # Add your specifications here.
end
----

各 Spec の前に、新しい window とビューコントローラクラスのインスタンスが作成されます。これらは、`window` と `controller` として Spec で利用できます。

TIP: window または controller のカスタムインスタンスの作成を行う必要がある場合には、`tests` の前に呼ばれる `before` でそれを行うことができます。テストを実施する前にコントローラの初期化を実行する必要があることが一般的です。その場合には、`tests` メソッドに block を渡します。

----
describe "The 'taking over the world' view" do
  tests TakingOverTheWorldViewController do |controller|
    controller.initial_data = {}
  end
----

Storyboards
^^^^^^^^^^^

`tests` メソッドに `:id` オプションでコントローラの Xcode identifier を渡すことで、http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIStoryboard_Class/Reference/Reference.html[storyboard] からコントローラをテストできます。

----
tests StoryboardViewController, :id => 'controller-id'
----

デフォルトでは、プロジェクトの __resources__ ディレクトリにある __MainStoryboard.storyboard__ ファイルからコントローラがロードされます。`:storyboard` オプションで storyboard のファイル名を渡すことで、異なるファイルからコントローラをロードすることができます。

----
tests StoryboardViewController, :storyboard => 'AlternateStoryboard', :id => 'controller-id'
----

TIP: `:id` オプションに対応する __Identifier__ フィールドは、Xcode で __View Controller__ の __Attributes Inspector__ で確認できます。__Attributes Inspector__ は __command-option-4__ というキーボードショートカットで表示できます。

Durations
~~~~~~~~~

いくつかのメソッドは、秒単位でイベントが生成される期間を指定するために、`:duration` オプションがあります。`:duration` は**常に**オプションです。

TIP: `Bacon::Functional.default_duration=` で、デフォルトの継続時間の値を変更できます。

Device Events
~~~~~~~~~~~~~

以降のメソッドはデバイスレベルで影響を与えるイベントを生成します。それらのメソッドは、アクセシビリティラベルや特定のビューを取りません。

rotate_device
^^^^^^^^^^^^^

指定された方向にデバイスを回転させます。

----
rotate_device(:to => orientation, :button => location)
----

*     **to**: デバイスを回転させる方向。`:portrait` か `:landscape` のいずれかを指定します。
* **button**: portrait/landscape の向きを示すために使用します。`:portrait` モードでは `:bottom` か `:top` のいずれか、`:landscape` モードでは `:left` か `:right` のいずれかを指定します。省略した場合には、`:portrait` モードでは `:bottom` 、`:landscape` モードでは `:left` がデフォルトとなります。

以下の例では、デバイスの左側にホームボタンが来るように、横方向へデバイスを回転します。

----
rotate_device :to => :landscape
----

あるいは、デバイスの右側にホームボタンが来なくてはいけない場合には、以下のようになります。

----
rotate_device :to => :landscape, :button => :right
----

accelerate
^^^^^^^^^^

加速度のイベントを生成します。

----
accelerate(:x => x_axis_acceleration, :y => y_axis_acceleration,
           :z => z_axis_acceleration, :duration => duration)
----

http://bit.ly/nWAu5X[UIAcceleration class reference] より、

* **x**: デバイスを縦方向で画面を正面に保持した状態で、x 軸はデバイスの左側 (マイナス) から右側 (プラス) の方向にあります。
* **y**: デバイスを縦方向で画面を正面に保持した状態で、y 軸はデバイスの底部 (マイナス) から上部 (プラス) の方向にあります。 
* **z**: デバイスを縦方向で画面を正面に保持した状態で、y 軸はデバイスの背面 (マイナス) から正面 (プラス) の方向にあります。 

背面方向にデバイスを振る動作をシミュレートするには、次のようになります。

----
accelerate :x => 0, :y => 0, :z => -1
----

shake
^^^^^

加速度のイベントを生成します。

----
shake()
----

特に上下左右に揺さぶる (Shaking-Motion) イベントを引き起こしたい場合に、このメソッドを使用します。

詳しくは http://bit.ly/MV57Y9[event handling guide] を参照ください。

Finding Views
~~~~~~~~~~~~~

ビューを取得するためのメソッドをこのセクションで扱います。これらのメソッドは、現在の `window` からビュー階層を下層へ走査します。

一致するビューがない場合、`timeout` で指定された間はリトライし続けます。`timeout` のデフォルト値は 3 秒です。探しているビューがまだロードされているか、あるいはアニメーションしているかどうか心配する必要はないでしょう。

タイムアウトが発生し、一致するビューがない場合には例外が発生します。

TIP: デフォルトのタイムアウト値は `Bacon::Functional.default_timeout=` で変更できます。

view
^^^^

指定されたアクセシビリティラベルと一致するビューを返します。

----
view(label)
----

例:

----
button = UIButton.buttonWithType(UIButtonTypeRoundedRect)
button.setTitle('Take over the world', forState:UIControlStateNormal)
window.addSubview(button)

view('Take over the world') # => button
----

TIP: `UIView#viewByName(accessibilityLabel, timeout)` を参照ください (https://github.com/HipByte/RubyMotion/blob/0928fafe6fffba2a99043bc66725d3b582aa99ae/lib/motion/spec/helpers/ui.rb#L123 で定義されています)。

views
^^^^^

指定されたクラスと一致するすべてのビューの配列を返します。

----
views(view_class)
----

例:

----
button1 = UIButton.buttonWithType(UIButtonTypeRoundedRect)
button1.setTitle('Take over the world', forState:UIControlStateNormal)
window.addSubview(button1)

button2 = UIButton.buttonWithType(UIButtonTypeRoundedRect)
button2.setTitle('But not tonight', forState:UIControlStateNormal)
window.addSubview(button2)

views(UIButton) # => [button1, button2]
----

TIP: `UIView#viewsByClass(viewClass, timeout)` を参照ください (https://github.com/HipByte/RubyMotion/blob/0928fafe6fffba2a99043bc66725d3b582aa99ae/lib/motion/spec/helpers/ui.rb#L127 で定義されています)。

View Events
~~~~~~~~~~~

このセクションで扱うメソッドはすべてビューを操作します。操作するビューのアクセシビリティラベルか、ビューのインスタンスを渡すことでビューを指定します。

NOTE: 一般的に、すべての UIKit コントローラはアクセシビリティラベルの適切なデフォルト値を持っています。タイトルが“Take over the world”のボタンは、アクセシビリティラベルに同じ値を持っています。しかしながら、カスタムビューを利用する場合や、デフォルト値を上書きする必要がある場合には、`accessibilityLabel` 属性を設定することによってそれを行うことができます。

'location' を必要とされる場合には、`CGPoint` のインスタンスか以下の定数のいずれかを指定できます。

* `:top_left`
* `:top`
* `:top_right`
* `:right`
* `:bottom_right`
* `:bottom`
* `:bottom_left`
* `:left`

NOTE: `CGPoint` のインスタンスは window 座標で指定されなければなりません。

TIP: いくつかのメソッドは、`:from` と `:to` を location オプションで取ります。上記の location 定数で `:from` か `:to` のみを指定した場合にはほかのオプションは省略でき、指定した location の反対側がデフォルトで設定されます。 `CGPoint` のインスタンスを使用する場合には、ほかのオプションも同様に指定しなければなりません。

tap
^^^

ビューのタップをシミュレートするイベントを生成します。

----
tap(label_or_view, :at => location, :times => number_of_taps, :touches => number_of_fingers)
----

以下のオプションはすべて省略可能です。

*      **at**: タップを発生させる location を指定します。デフォルトはビューの中央が設定されます。
*   **times**: ビューをタップする回数を指定します。デフォルトはシングルタップが設定されます。
* **touches**: ビューをタップするのに使用する指の数を指定します。デフォルトではシングルタッチが設定されます。

ビューを 1 回タップする場合は次のようになります。

----
button = UIButton.buttonWithType(UIButtonTypeRoundedRect)
button.setTitle('Take over the world', forState:UIControlStateNormal)
window.addSubview(button)

tap 'Take over the world'
----

ビューを 2 回 2 本の指でタップする場合は、次のようにオプションを指定します。

----
view = UIView.alloc.initWithFrame(CGRectMake(0, 0, 100, 100))
view.accessibilityLabel = 'tappable view'
recognizer = UITapGestureRecognizer.alloc.initWithTarget(self, action:'handleTap:')
recognizer.numberOfTapsRequired = 2
recognizer.numberOfTouchesRequired = 2
view.addGestureRecognizer(recognizer)

tap 'tappable view', :times => 2, :touches => 2
----

flick
^^^^^

フリック操作のイベントを生成します。

----
flick(label_or_view, :from => location, :to => location, :duration => duration)
----

* **from**: ドラッグを開始する location を指定します。
*   **to**: ドラッグが終了する location を指定します。

スイッチをフリックする場合は、次のようになります。

----
switch = UISwitch.alloc.initWithFrame(CGRectMake(0, 0, 100, 100))
switch.accessibilityLabel = 'Enable rainbow theme'
window.addSubview(switch)

flick 'Enable rainbow theme', :to => :right
----

pinch_open
^^^^^^^^^^

ピンチアウト操作のイベントを生成します。

----
pinch_open(label_or_view, :from => location, :to => location, :duration => duration)
----

* **from**: 両方の指がジェスチャーを開始する location を指定します。デフォルトでは `:left` が設定されます。
*   **to**: 移動する方の指のジェスチャーが終わる location を指定します。デフォルトでは `:right` が設定されます。

以下は、`UIScrollView` のコンテンツを拡大表示します。

----
view('Zooming scrollview').zoomScale # => 1.0
pinch_open 'Zooming scrollview'
view('Zooming scrollview').zoomScale # => 2.0
----

pinch_close
^^^^^^^^^^^

ピンチイン操作のイベントを生成します。

----
pinch_close(label_or_view, :from => location, :to => location, :duration => duration)
----

* **from**: 移動する方の指のジェスチャーを開始する location を指定します。デフォルトでは `:right` が設定されます。
*   **to**: 両方の指がジェスチャーを終了する location を指定します。デフォルトでは `:left` が設定されます。

以下は、`UIScrollView` のコンテンツを縮小表示します。

----
view('Zooming scrollview').zoomScale # => 1.0
pinch_close 'Zooming scrollview'
view('Zooming scrollview').zoomScale # => 0.5
----

drag
^^^^

指定された開始・終了位置の間をドラッグする操作のイベントを生成します。

----
drag(label_or_view, :from => location, :to => location, :number_of_points => steps,
     :points => path, :touches => number_of_fingers, :duration => duration)
----

*             **from**: ドラッグを開始する location を指定します。`:points` が指定された場合には、使われません。
*               **to**: ドラッグを終了する location を指定します。`:points` が指定された場合には、使われません。
* **number_of_points**: `:from` から `:to` を補間するパスのポイント数を指定します。デフォルトでは 20 が設定されます。`:points` が指定された場合には、使われません。
*           **points**: ドラッグするパスを指定する `CGPoint` インスタンスの配列を指定します。
*          **touches**: ドラッグに使用する指の数を指定します。デフォルトではシングルタッチが設定されます。

NOTE: ドラッグした方向とは逆方向にスクロールすることに注意してください。

以下は、スクロールビューを下へスクロールします。

----
view('Scrollable scrollview').contentOffset.y # => 0
drag 'Scrollable scrollview', :from => :bottom
view('Scrollable scrollview').contentOffset.y # => 400
----

rotate
^^^^^^

ビュー中央を中心に時計回りに回転操作するイベントを生成します。

----
rotate(label_or_view, :radians => angle, :degrees => angle, :touches => number_of_fingers,
       :duration => duration)
----

* **radians**: ラジアン単位の回転角度を指定します。デフォルトでは π が設定されます。
* **degrees**: 度単位の回転角度を指定します。デフォルトでは 180 が設定されます。
* **touches**: 回転に使用する指の数を指定します。デフォルトでは 2 が設定されます。
