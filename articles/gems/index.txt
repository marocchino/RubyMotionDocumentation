Writing Ruby gems for RubyMotion
================================
Laurent Sansonetti <lrz@hipbyte.com>

사실상 Ruby의 패키지 시스템인 RubyGems를 사용함으로써 RubyMotion프로젝트를 확장 시킬 수 있습니다. 이 문서는 RubyMotion에 특화된 gem을 만드는 법에 대해 설명합니다.

이 문서는 Francis Chong님의 글 http://reality.hk/posts/2012/05/22/create-gems-for-rubymotion[Create gems for RubyMotion]에 영감을 받았습니다.

Getting started
---------------

RubyMotion being a statically-built flavor of the Ruby language, existing Ruby gems will not work out of the box in RubyMotion. RubyMotion gems need to be specifically architectured for RubyMotion itself.

In RubyMotion, gems are required in a project's 'Rakefile' and are responsible to extend the project's configuration, for instance by adding files to the project or introducing new settings or +rake+ tasks.

이 문서에서는 가상의 +foo+ gem을 기준으로 설명하겠습니다. +foo+ gem의 파일 트리는 다음과 같습니다.

----
foo.gemspec
lib
  foo.rb
----

RubyMotion 프로젝트에서 +foo+ gem을 사용하려면 'Rakefile'에서 require하기만 하면 됩니다.

----
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'

require 'rubygems'
require 'foo'

# ...
----

NOTE: +require "rubygems"+ 은 Ruby 1.9를 사용하신다면 필요 없습니다.

+foo.rb+ 파일은 gem의 진입지점 입니다. 밑의 코드로 RubyMotion밖에서 이 파일이 로드되지 않도록 보호해두는 것도 좋습니다.

----
unless defined?(Motion::Project::Config)
  raise "This file must be required within a RubyMotion project Rakefile."
end
----

Adding source files
-------------------

A Gem can add files to a RubyMotion project, simply by opening the +Motion::Project::App+ block and appending their paths to the +app.files+ variable.

As an example, let's assume the +foo+ gem has a bunch of files under the 'lib/foo' directory that are intended to be mixed in to a RubyMotion project.

----
foo.gemspec
lib
  foo.rb
  foo
    foo-model.rb
    foo-view.rb
    foo-controller.rb
----

The 'lib/foo.rb' file can be modified as such.

----
unless defined?(Motion::Project::Config)
  raise "This file must be required within a RubyMotion project Rakefile."
end

Motion::Project::App.setup do |app|
  Dir.glob(File.join(File.dirname(__FILE__), 'foo/*.rb')).each do |file|
    app.files.unshift(file)
  end
end
----

The 'foo-model.rb', 'foo-view.rb' and 'foo-controller.rb' files will be compiled and used by the build system before any other files in the project.

Adding dependencies
-------------------

The +foo+ gem is not limited to adding source files. Since it has access to the +Motion::Project::Config+ object, it has access to the same set of project settings a RubyMotion project does.

For instance, we can assume that our +foo+ gem comes with Objective-C source code.

----
foo.gemspec
lib
  foo.rb
  ...
vendor
  native-foo
    native-foo-model.{m,h}
    native-foo-view.{m,h}
    native-foo-controller.{m,h}
----

This code requires the +CoreData+ framework to be linked with the app.

We can change the 'foo.rb' file accordingly to vendor the native code and set a framework dependency.

----
unless defined?(Motion::Project::Config)
  raise "This file must be required within a RubyMotion project Rakefile."
end

Motion::Project::App.setup do |app|
  Dir.glob(File.join(File.dirname(__FILE__), 'foo/*.rb')).each do |file|
    app.files.unshift(file)
  end
  app.vendor_project(File.expand_path(File.join(File.dirname(__FILE__), '../vendor/native-foo')), :static)
  app.frameworks += ['CoreData']
end
----

Adding +rake+ tasks
-------------------

A RubyMotion gem can also very easily extend the build system to introduce new +rake+ tasks.

Since the 'foo.rb' file is required within the RubyMotion project 'Rakefile', it's just a matter of defining the tasks there.

As an example, let's define the +foo+ task which would connect to an imaginary service.

----
unless defined?(Motion::Project::Config)
  raise "This file must be required within a RubyMotion project Rakefile."
end

Motion::Project::App.setup do |app|
  ...
end

desc "Submit your code to the foo service"
task :foo do
  ...
end
----
